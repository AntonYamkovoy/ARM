


ARM Macro Assembler    Page 1 


    1 00000000         
    2 00000000 E0004000 
                       T0      EQU              0xE0004000  ;Timer 0 Base Addre
                                                            ss
    3 00000000 E0008000 
                       T1      EQU              0xE0008000  ;Timer 1 Base Addre
                                                            ss
    4 00000000         
    5 00000000 00000000 
                       IR      EQU              0           ; Add this to a tim
                                                            er's base address t
                                                            o get actual regist
                                                            er address
    6 00000000 00000004 
                       TCR     EQU              4           ; Timer Command Res
                                                            et Register offset
    7 00000000 00000014 
                       MCR     EQU              0x14        ; Timer Mode Reset 
                                                            and Interrupt Offse
                                                            t
    8 00000000 00000018 
                       MR0     EQU              0x18        ; Match Register (c
                                                            ounter) offset
    9 00000000         
   10 00000000 00000002 
                       TimerCommandReset
                               EQU              2           ; Reset timer
   11 00000000 00000001 
                       TimerCommandRun
                               EQU              1           ; Run timer
   12 00000000 00000003 
                       TimerModeResetAndInterrupt
                               EQU              3           ; Reset timer mode 
                                                            and interrupt
   13 00000000 00000001 
                       TimerResetTimeR0Interrupt
                               EQU              1           ; Reset timer 0 and
                                                             interrupt
   14 00000000 000000FF 
                       TimerResetAllInterrupts
                               EQU              0xFF        ; Reset all timer i
                                                            nterrupts
   15 00000000         
   16 00000000         ; VIC Stuff -- UM, Table 41
   17 00000000 FFFFF000 
                       VIC     EQU              0xFFFFF000  ; VIC Base Address
   18 00000000 00000010 
                       IntEnable
                               EQU              0x10        ; Interrupt Enable
   19 00000000 00000030 
                       VectAddr
                               EQU              0x30        ;
   20 00000000 00000100 
                       VectAddR0
                               EQU              0x100       ; Vectored Interrup
                                                            t 0
   21 00000000 00000200 
                       VectCtrl0
                               EQU              0x200       ; Vectored Interrup



ARM Macro Assembler    Page 2 


                                                            t Control 0
   22 00000000         
   23 00000000 00000004 
                       TimeR0ChannelNumber
                               EQU              4           ; UM, Table 63
   24 00000000 00000010 
                       TimeR0Mask
                               EQU              1<<TimeR0ChannelNumber 
                                                            ; UM, Table 63
   25 00000000 00000005 
                       IRQslot_en
                               EQU              5           ; UM, Table 58
   26 00000000         
   27 00000000         ;Labels & Values
   28 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018
   29 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
   30 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   31 00000000 E0028010 
                       IO1PIN  EQU              0xE0028010
   32 00000000         
   33 00000000 E0028000 
                       IO0PIN  EQU              0xE0028000
   34 00000000 E0028004 
                       IO0SET  EQU              0xE0028004
   35 00000000 E0028008 
                       IO0DIR  EQU              0xE0028008
   36 00000000 E002800C 
                       IO0CLR  EQU              0xE002800C
   37 00000000         
   38 00000000         
   39 00000000         ; Button Significances
   40 00000000 00000014 
                       nplus   equ              20
   41 00000000 00000015 
                       nminus  equ              21
   42 00000000 00000016 
                       btn_add equ              22
   43 00000000 00000017 
                       btn_sub equ              23
   44 00000000 FFFFFFEA 
                       clear   equ              -22
   45 00000000 FFFFFFE9 
                       allclear
                               equ              -23
   46 00000000         
   47 00000000         
   48 00000000         ; State Machine States
   49 00000000 00000000 
                       sm_initial_state
                               equ              0
   50 00000000 00000001 
                       sm_getting_number
                               equ              1
   51 00000000 00000002 
                       sm_getting_operator
                               equ              2



ARM Macro Assembler    Page 3 


   52 00000000         
   53 00000000         ; Calculator Operators
   54 00000000 00000000 
                       co_tx   equ              0           ; acc := x
   55 00000000 00000001 
                       co_add  equ              1           ; acc := acc + x
   56 00000000 00000002 
                       co_sub  equ              2           ; acc := acc - x;
   57 00000000         
   58 00000000         
   59 00000000                 AREA             InitialisationAndMain, CODE, RE
ADONLY
   60 00000000                 IMPORT           main
   61 00000000         
   62 00000000                 EXPORT           start
   63 00000000         start
   64 00000000         
   65 00000000         
   66 00000000         
   67 00000000         ; Initialise the VIC
   68 00000000 E59F0258        LDR              R0,=VIC     ;Looking at you, VI
                                                            C!
   69 00000004         
   70 00000004 E59F1258        LDR              R1,=irqhan  ;IRQ Handler
   71 00000008 E5801100        STR              R1,[R0,#VectAddR0] ;Associate o
                                                            ur interrupt handle
                                                            r with Vectored Int
                                                            errupt 0
   72 0000000C         
   73 0000000C E3A01024        MOV              R1,#TimeR0ChannelNumber+(1<<IRQ
slot_en)
   74 00000010 E5801200        STR              R1,[R0,#VectCtrl0] ;Make Timer 
                                                            0 interrupts the so
                                                            urce of Vectored In
                                                            terrupt 0
   75 00000014         
   76 00000014 E3A01010        MOV              R1,#TimeR0Mask
   77 00000018 E5801010        STR              R1,[R0,#IntEnable] ;Enable Time
                                                            r 0 interrupts to b
                                                            e recognised by the
                                                             VIC
   78 0000001C         
   79 0000001C E3A01000        MOV              R1,#0
   80 00000020 E5801030        STR              R1,[R0,#VectAddr] ;Remove any p
                                                            ending interrupt (m
                                                            ay not be needed)
   81 00000024         
   82 00000024         ; Initialise Timer 0
   83 00000024 E59F023C        LDR              R0,=T0      ;Looking at you, Ti
                                                            mer 0!
   84 00000028         
   85 00000028 E3A01002        MOV              R1,#TimerCommandReset
   86 0000002C E5801004        STR              R1,[R0,#TCR] ;Reset the timer
   87 00000030         
   88 00000030 E3A010FF        MOV              R1,#TimerResetAllInterrupts
   89 00000034 E5801000        STR              R1,[R0,#IR] ;Reset all interrup
                                                            ts from the timer
   90 00000038         
   91 00000038 E59F122C        LDR              R1,=(14745600/200)-1 ;5 ms = 1/



ARM Macro Assembler    Page 4 


                                                            200 second
   92 0000003C E5801018        STR              R1,[R0,#MR0] ;Match Register 0 
                                                            = 5ms
   93 00000040         
   94 00000040 E3A01003        MOV              R1,#TimerModeResetAndInterrupt
   95 00000044 E5801014        STR              R1,[R0,#MCR] ;Timer Mode Reset 
                                                            and Interrupt offse
                                                            t
   96 00000048         
   97 00000048 E3A01001        MOV              R1,#TimerCommandRun
   98 0000004C E5801004        STR              R1,[R0,#TCR] ;Run timer()
   99 00000050         
  100 00000050         ;Thread 0 = rgb-leds rotation
  101 00000050         ;thread0 initialisation
  102 00000050         thread0Start
  103 00000050         
  104 00000050         
  105 00000050 E59F1218        LDR              R1,=IO0DIR
  106 00000054 E3A02826        LDR              R2,=0x00260000 ; selecting pins
                                                             p0.17 && p0.18 && 
                                                            p0.21    binary mas
                                                            k : 0b 0000 0000 00
                                                            01 0011 0000 0000 0
                                                            000 0000    
  107 00000058 E5812000        STR              R2,[R1]
  108 0000005C E59F6210        LDR              R6,=IO0SET  ;r6 = OFF        
  109 00000060 E5862000        STR              R2,[R6]
  110 00000064 E59F720C        LDR              R7,=IO0CLR  ; r7 = ON       
  111 00000068         
  112 00000068 E3A03602        LDR              R3,=0x00200000 ; red mask    
  113 0000006C E3A05701        LDR              R5,=0x00040000 ; blue mask
  114 00000070 E3A09802        LDR              R9,=0x00020000 ; green mask
  115 00000074         
  116 00000074 E3A0A000        mov              r10,#0      ; 0 = red, 1 = blue
                                                            , 2 = green
  117 00000078         
  118 00000078         
  119 00000078         
  120 00000078         xloop
  121 00000078         
  122 00000078         ;-----------------------------------------
  123 00000078 E59F81FC        LDR              R8,=8000000 ; delay about 1 sec
                                                            ond
  124 0000007C         dloop0
  125 0000007C E2588001        SUBS             R8, R8 ,#1
  126 00000080 1AFFFFFD        BNE              dloop0
  127 00000084         ;-----------------------------------------
  128 00000084         
  129 00000084 E28AA001        add              r10, r10,#1
  130 00000088 E35A0003        cmp              r10,#3
  131 0000008C 1A000000        bne              continue
  132 00000090 E3A0A000        mov              r10,#0      ;
  133 00000094         
  134 00000094         continue
  135 00000094         
  136 00000094         ; turn off all leds
  137 00000094         ; and then turn on the required led
  138 00000094 E5863000        str              r3,[r6]
  139 00000098 E5865000        str              r5,[r6]



ARM Macro Assembler    Page 5 


  140 0000009C E5869000        str              r9,[r6]
  141 000000A0         
  142 000000A0 E35A0000        cmp              r10,#0
  143 000000A4 0A000003        beq              red
  144 000000A8 E35A0001        cmp              r10,#1
  145 000000AC 0A000003        beq              blue
  146 000000B0 E35A0002        cmp              r10,#2
  147 000000B4 0A000003        beq              green
  148 000000B8         
  149 000000B8         
  150 000000B8         red
  151 000000B8 E5873000        str              r3,[r7]     ; turn on red
  152 000000BC EA000003        B                skip
  153 000000C0         
  154 000000C0         blue
  155 000000C0 E5875000        str              r5,[r7]     ; turn on blue
  156 000000C4 EA000001        B                skip
  157 000000C8         
  158 000000C8         green
  159 000000C8 E5879000        str              r9,[r7]     ; turn on green
  160 000000CC EAFFFFFF        B                skip
  161 000000D0         
  162 000000D0         
  163 000000D0         skip
  164 000000D0 EAFFFFE8        B                xloop
  165 000000D4         
  166 000000D4         
  167 000000D4         ;Thread 1 = brady practical 3
  168 000000D4         ;thread1 initialisation
  169 000000D4         thread1Start
  170 000000D4         ;initialise the LEDs
  171 000000D4 E59F11A4        ldr              r1,=IO1DIR
  172 000000D8 E3A0280F        ldr              r2,=0x000f0000 ;select P1.19--P
                                                            1.16
  173 000000DC E5812000        str              r2,[r1]     ;make them outputs
  174 000000E0         
  175 000000E0         ; use r1 to hold the calculator's state, r2 to hold its 
                       "acc", r3 to hold its "x" and r4 to hold the pending ope
                       rator
  176 000000E0         clear_all
  177 000000E0 E3A01000        mov              r1,#sm_initial_state 
                                                            ; initial state
  178 000000E4 E3A02000        mov              r2,#0       ; 0        
  179 000000E8 E3A03000        mov              r3,#0       ; 0
  180 000000EC E3A04000        mov              r4,#co_tx   ; transfer from x t
                                                            o acc
  181 000000F0 E3A00000        mov              r0,#0
  182 000000F4         update_display_and_loop
  183 000000F4 EBFFFFFE        bl               display     ; clear the display
                                                            
  184 000000F8         event_loop
  185 000000F8 EBFFFFFE        bl               getkey      ; get next key
  186 000000FC EBFFFFFE        bl               blink       ; show a response
  187 00000100         
  188 00000100         ; now, check if the state machine is in the initial stat
                       e
  189 00000100 E3A05000        mov              r5,#sm_initial_state
  190 00000104 E1510005        cmp              r1,r5
  191 00000108 1A00000D        bne              not_initial_state



ARM Macro Assembler    Page 6 


  192 0000010C         ; in initial state
  193 0000010C E3A05014        mov              r5,#nplus
  194 00000110 E1550000        cmp              r5,r0       ; was that an nplus
                                                            
  195 00000114 0A000006        beq              sm_is_00    ; branch if so
  196 00000118 E3A05015        mov              r5,#nminus
  197 0000011C E1550000        cmp              r5,r0       ; was that an nminu
                                                            s
  198 00000120 1AFFFFF4        bne              event_loop  ; if not, just igno
                                                            re it
  199 00000124 E2433001        sub              r3,#1       ; x := x - 1
  200 00000128 E1A00003        mov              r0,r3       ; display "x"
  201 0000012C E3A01001        mov              r1,#sm_getting_number 
                                                            ; change state
  202 00000130 EAFFFFEF        b                update_display_and_loop
  203 00000134         sm_is_00
  204 00000134 E2833001        add              r3,#1       ; x := x + 1
  205 00000138 E1A00003        mov              r0,r3
  206 0000013C E3A01001        mov              r1,#sm_getting_number
  207 00000140 EAFFFFEB        b                update_display_and_loop
  208 00000144         
  209 00000144         not_initial_state
  210 00000144         ; now, check if the state machine is in the getting_numb
                       er state
  211 00000144 E3A05001        mov              r5,#sm_getting_number
  212 00000148 E1510005        cmp              r1,r5
  213 0000014C 1A000023        bne              not_getting_number
  214 00000150         ; in the getting_number state
  215 00000150 E3A05014        mov              r5,#nplus
  216 00000154 E1550000        cmp              r5,r0
  217 00000158 1A000002        bne              sm_gn_00    ; branch if not n+
  218 0000015C E2833001        add              r3,#1       ; x := x+1
  219 00000160 E1A00003        mov              r0,r3       ; display x
  220 00000164 EAFFFFE2        b                update_display_and_loop
  221 00000168         sm_gn_00
  222 00000168 E3A05015        mov              r5,#nminus
  223 0000016C E1550000        cmp              r5,r0
  224 00000170 1A000002        bne              sm_gn_01    ; branch if not n-
  225 00000174 E2433001        sub              r3,#1
  226 00000178 E1A00003        mov              r0,r3
  227 0000017C EAFFFFDC        b                update_display_and_loop
  228 00000180         sm_gn_01
  229 00000180 E3A05017        mov              r5,#btn_sub
  230 00000184 E1550000        cmp              r5,r0
  231 00000188 1A000003        bne              sm_gn_02    ; branch if not sub
                                                            (tract)
  232 0000018C EBFFFFFE        bl               perform_pending_op
  233 00000190 E3A04002        mov              r4,#co_sub  ; store "subtract" 
                                                            as the pending oper
                                                            ator
  234 00000194 E3A01002        mov              r1,#sm_getting_operator
  235 00000198 EAFFFFD6        b                event_loop
  236 0000019C         sm_gn_02
  237 0000019C E3A05016        mov              r5,#btn_add
  238 000001A0 E1550000        cmp              r5,r0
  239 000001A4 1A000003        bne              sm_gn_03    ; branch if not add
                                                            
  240 000001A8 EBFFFFFE        bl               perform_pending_op
  241 000001AC E3A04001        mov              r4,#co_add  ; store "add" as th



ARM Macro Assembler    Page 7 


                                                            e pending operator 
                                                                   
  242 000001B0 E3A01002        mov              r1,#sm_getting_operator
  243 000001B4 EAFFFFCF        b                event_loop
  244 000001B8         sm_gn_03
  245 000001B8 E3E05015        mov              r5,#clear
  246 000001BC E1550000        cmp              r5,r0
  247 000001C0 1A000002        bne              sm_gn_04    ; branch if not cle
                                                            ar
  248 000001C4 E3A03000        mov              r3,#0
  249 000001C8 E1A00003        mov              r0,r3
  250 000001CC EAFFFFC8        b                update_display_and_loop
  251 000001D0         sm_gn_04
  252 000001D0 E3E05016        mov              r5,#allclear
  253 000001D4 E1550000        cmp              r5,r0
  254 000001D8 1AFFFFC6        bne              event_loop  ; branch if not all
                                                            clear
  255 000001DC EAFFFFBF        b                clear_all
  256 000001E0         
  257 000001E0         not_getting_number
  258 000001E0         ; now, check if the state machine is in the getting_oper
                       ator state
  259 000001E0 E3A05002        mov              r5,#sm_getting_operator
  260 000001E4 E1510005        cmp              r1,r5
  261 000001E8 1AFFFFC2        bne              event_loop  ; branch if not in 
                                                            the getting operato
                                                            r state -- this is 
                                                            an error, but ignor
                                                            e it
  262 000001EC E3A05014        mov              r5,#nplus
  263 000001F0 E1550000        cmp              r5,r0
  264 000001F4 1A000003        bne              sm_go_00    ; branch if not n+
  265 000001F8 E3A01001        mov              r1,#sm_getting_number
  266 000001FC E3A03000        mov              r3,#0       ; x := 0
  267 00000200 E1A00003        mov              r0,r3
  268 00000204 EAFFFFBA        b                update_display_and_loop
  269 00000208         sm_go_00
  270 00000208 E3A05015        mov              r5,#nminus
  271 0000020C E1550000        cmp              r5,r0
  272 00000210 1A000003        bne              sm_go_01    ; branch if not n-
  273 00000214 E3A01001        mov              r1,#sm_getting_number
  274 00000218 E3A03000        mov              r3,#0       ; x := 0
  275 0000021C E1A00003        mov              r0,r3
  276 00000220 EAFFFFB3        b                update_display_and_loop
  277 00000224         sm_go_01
  278 00000224 E3A05017        mov              r5,#btn_sub
  279 00000228 E1550000        cmp              r5,r0
  280 0000022C 1A000001        bne              sm_go_02    ; branch if not the
                                                             sub(tract) button
  281 00000230 E3A04002        mov              r4,#co_sub
  282 00000234 EAFFFFAF        b                event_loop
  283 00000238         sm_go_02
  284 00000238 E3A05016        mov              r5,#btn_add
  285 0000023C E1550000        cmp              r5,r0
  286 00000240 1A000001        bne              sm_go_03    ; branch if not the
                                                             add button
  287 00000244 E3A04001        mov              r4,#co_add
  288 00000248 EAFFFFAA        b                event_loop
  289 0000024C         sm_go_03



ARM Macro Assembler    Page 8 


  290 0000024C E3E05016        mov              r5,#allclear
  291 00000250 E1550000        cmp              r5,r0
  292 00000254 1AFFFFA7        bne              event_loop  ; branch if not the
                                                             all clear button
  293 00000258 EAFFFFA0        b                clear_all   ; start over       
                                                             
  294 0000025C         
  295 0000025C         ; the program will never reach the next line
  296 0000025C EAFFFFFE 
                       stop    B                stop
  297 00000260         
  298 00000260         
  299 00000260         
  300 00000260         
  301 00000260         
  302 00000260         
  303 00000260         
  304 00000260 FFFFF000 
              00000000 
              E0004000 
              00011FFF 
              E0028008 
              E0028004 
              E002800C 
              007A1200 
              E0028018         AREA             InterruptStuff, CODE, READONLY
  305 00000000         
  306 00000000         
  307 00000000         irqhan
  308 00000000 E24EE004        SUB              LR, LR, #4  ;Adjust the LR to l
                                                            ast location
  309 00000004 E92D0003        STMFD            SP!, {R0 - R1} ; preserve R0 an
                                                            d R1 onto syst stac
                                                            k
  310 00000008         
  311 00000008 E59F0084        LDR              R0, =threads
  312 0000000C E59F1084        LDR              R1, =threadIndex
  313 00000010 E5911000        LDR              R1, [R1]    ;  get threadIndex 
                                                            from memory
  314 00000014 E1A01101        LSL              R1, R1, #2  ; offset = threadIn
                                                            dex * 4
  315 00000018 E0800001        ADD              R0, R0, R1  ; threadAddress =+ 
                                                            offset
  316 0000001C         
  317 0000001C E5900000        LDR              R0, [R0]    ; R0 now points to 
                                                            memory space of thr
                                                            ead stack
  318 00000020 E2801008        ADD              R1, R0, #8  ; offset (skips R0 
                                                            and R1)
  319 00000024 E8815FFC        STMEA            R1, {R2 - R12, LR} ; store ever
                                                            ything from R2-R12 
                                                            and LR onto thread 
                                                            stack
  320 00000028 E8BD000C        LDMFD            SP!, {R2 - R3} ; load the saved
                                                             registers back (ex
                                                            cept into R2 and R3
                                                             this time)
  321 0000002C E880000C        STMEA            R0, {R2 - R3} ; store these ont
                                                            o the thread stack



ARM Macro Assembler    Page 9 


  322 00000030         ;current threads registers are now preserved
  323 00000030         
  324 00000030         
  325 00000030         ; gettin ghte registers from the next thread to run
  326 00000030 E59F005C        LDR              R0, =threads
  327 00000034 E59F105C        LDR              R1, =threadIndex
  328 00000038 E59F205C        LDR              R2, =numThreads
  329 0000003C E5913000        LDR              R3, [R1]    ; threadIndex
  330 00000040 E5922000        LDR              R2, [R2]    ; threadNum
  331 00000044 E2833001        ADD              R3, R3, #1  ; threadIndex++
  332 00000048 E1530002        CMP              R3, R2      ; if(threadIndex > 
                                                            threadNum)
  333 0000004C BA000000        BLT              endCycle    ;
  334 00000050 E3A03000        LDR              R3, =0      ;    threadIndex = 
                                                            0
  335 00000054         endCycle
  336 00000054 E5813000        STR              R3, [R1]    ; push thread index
                                                             back to meme
  337 00000058         
  338 00000058         ; change pointer to next thread stack
  339 00000058 E1A03103        LSL              R3, R3, #2  ; offset = threadIn
                                                            dex * 4
  340 0000005C E0800003        ADD              R0, R0, R3  ; get new stack adr
                                                            esses
  341 00000060 E5900000        LDR              R0, [R0]    ; newThreadStackAdd
                                                            ress
  342 00000064         
  343 00000064 E3A0200D        LDR              R2, =13     ; registerCount
  344 00000068 E7904102        LDR              R4, [R0, R2, LSL #2] ; load the
                                                             pc from this threa
                                                            d to R4
  345 0000006C         
  346 0000006C E8B0000C        LDMFD            R0!, {R2 - R3} ; load R2 and R3
                                                             off of thread stac
                                                            k
  347 00000070 E92D001C        STMFD            SP!, {R2 - R4} ; preserve R0, R
                                                            1 and PC on the sys
                                                            t stack
  348 00000074 E8B01FFC        LDMFD            R0!, {R2 - R12} ; load the save
                                                            d registers off of 
                                                            the thread stack
  349 00000078         
  350 00000078         ; reseting timere
  351 00000078 E59F0028        LDR              R0,=T0
  352 0000007C E3A01001        MOV              R1,#TimerResetTimeR0Interrupt
  353 00000080 E5801000        STR              R1,[R0,#IR] ;Remove MR0 interru
                                                            pt request from tim
                                                            er
  354 00000084         
  355 00000084 E59F0020        LDR              R0,=VIC
  356 00000088 E3A01000        MOV              R1,#0       ;Stop VIC from maki
                                                            ng interrupt to CPU
                                                            
  357 0000008C E5801030        STR              R1,[R0,#VectAddr] ;Reset VIC
  358 00000090         
  359 00000090         ;POP OFF STACK
  360 00000090 E8FD8003        LDMFD            SP!, {R0 - R1, PC}^ ; load the 
                                                            rest of the registe
                                                            rs and change the p



ARM Macro Assembler    Page 10 


                                                            rogram counter
  361 00000094         
  362 00000094 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              E0004000 
              FFFFF000         AREA             Subroutines, CODE, READONLY
  363 00000000         
  364 00000000         
  365 00000000         
  366 00000000         
  367 00000000         perform_pending_op
  368 00000000 E92D4001        stmfd            sp!,{r0,lr}
  369 00000004 E3A00000        mov              r0,#co_tx
  370 00000008 E1540000        cmp              r4,r0
  371 0000000C 1A000001        bne              ppo_0       ; branch if not a t
                                                            ransfer
  372 00000010 E1A02003        mov              r2,r3       ; do the transfer
  373 00000014 EA000008        b                ppo_x
  374 00000018 E3A00001 
                       ppo_0   mov              r0,#co_add
  375 0000001C E1540000        cmp              r4,r0
  376 00000020 1A000001        bne              ppo_1       ; branch if not an 
                                                            add
  377 00000024 E0822003        add              r2,r3
  378 00000028 EA000003        b                ppo_x
  379 0000002C E3A00002 
                       ppo_1   mov              r0,#co_sub
  380 00000030 E1540000        cmp              r4,r0
  381 00000034 1A000000        bne              ppo_x       ; branch if not a s
                                                            ub -- actually this
                                                             is an error
  382 00000038 E0422003        sub              r2,r3
  383 0000003C         ppo_x
  384 0000003C E1A00002        mov              r0,r2
  385 00000040 EB000001        bl               display
  386 00000044 E8BD4001        ldmfd            sp!,{r0,lr}
  387 00000048 E12FFF1E        bx               lr
  388 0000004C         
  389 0000004C         
  390 0000004C         
  391 0000004C E92D0006 
                       display stmfd            sp!,{r1,r2}
  392 00000050 E3A0280F        ldr              r2,=0x000f0000 ; select P1.19--
                                                            P1.16 str r2,[r1]  
                                                            ;make them outputs
  393 00000054 E59F1104        ldr              r1,=IO1SET
  394 00000058 E5812000        str              r2,[r1]     ; set them to turn 
                                                            the LEDs off
  395 0000005C E1A02000        mov              r2,r0
  396 00000060 E202200F        and              r2,#2_1111  ; clean it up
  397 00000064 E1A02102        mov              r2,r2,lsl #2
  398 00000068 E59F10F4        ldr              r1,=revtab
  399 0000006C E0811002        add              r1,r2
  400 00000070 E5912000        ldr              r2,[r1]
  401 00000074 E59F10EC        ldr              r1,=IO1CLR
  402 00000078 E5812000        str              r2,[r1]     ; turn on the relev



ARM Macro Assembler    Page 11 


                                                            ant bits
  403 0000007C E8BD0006        ldmfd            sp!,{r1,r2}
  404 00000080 E12FFF1E        bx               lr
  405 00000084         
  406 00000084         
  407 00000084         ; this blinks the rightmost 4 bits of r0 in the ARM boar
                       d's LEDs
  408 00000084         ; assumes the IO1DIR is already correctly set up
  409 00000084         
  410 00000084 E92D001E 
                       blink   stmfd            sp!,{r1-r4}
  411 00000088 E3A0280F        ldr              r2,=0x000f0000 ; select P1.19--
                                                            P1.16 str r2,[r1]  
                                                            ;make them outputs
  412 0000008C E59F10D8        ldr              r1,=IO1PIN
  413 00000090 E5913000        ldr              r3,[r1]     ; get current LEDs
  414 00000094 E59F10C4        ldr              r1,=IO1SET
  415 00000098 E5812000        str              r2,[r1]     ; set them to turn 
                                                            the LEDs off
  416 0000009C         
  417 0000009C E59F10CC        ldr              r1,=2000000 ; guess
  418 000000A0 E2511001 
                       blink0  subs             r1,#1
  419 000000A4 1AFFFFFD        bne              blink0
  420 000000A8 E0233002        eor              r3,r2       ; get those bit tha
                                                            t were 0 turned to 
                                                            1
  421 000000AC E0033002        and              r3,r2       ; turn off all thos
                                                            e other bits
  422 000000B0 E59F10B0        ldr              r1,=IO1CLR
  423 000000B4 E5813000        str              r3,[r1]     ; turn on the relev
                                                            ant bits
  424 000000B8 E8BD001E        ldmfd            sp!,{r1-r4}
  425 000000BC E12FFF1E        bx               lr
  426 000000C0         
  427 000000C0         ; this returns the index number of the button pressed,
  428 000000C0         ; or its negative if long-pressed in r0
  429 000000C0 E92D01FE 
                       getkey  stmfd            sp!,{r1-r8}
  430 000000C4 E3A0160F        ldr              r1,=0x00f00000 ; mask of all th
                                                            e keys
  431 000000C8 E59F209C        ldr              r2,=IO1PIN  ; GPIO 1 Pin Regist
                                                            er
  432 000000CC E59F80A0        ldr              r8,=dbtime  ; minimum debounce 
                                                            count
  433 000000D0 E3A03000 
                       getk02  mov              r3,#0       ; number of success
                                                            ive samples of key 
                                                            down
  434 000000D4 E59F409C 
                       getk03  ldr              r4,=keytab  ; start of the tabl
                                                            e
  435 000000D8 E3A05004        mov              r5,#4       ; entries in table
  436 000000DC E5926000        ldr              r6,[r2]     ; read the GPIO
  437 000000E0 E0066001        and              r6,r6,r1    ; mask off all the 
                                                            other stuff
  438 000000E4 E5947000 
                       getk01  ldr              r7,[r4]     ; get entry in keyt
                                                            ab



ARM Macro Assembler    Page 12 


  439 000000E8 E2844008        add              r4,#8       ; point to next one
                                                            
  440 000000EC E1560007        cmp              r6,r7       ; match?
  441 000000F0 0A000002        beq              getk00      ; branch if so
  442 000000F4 E2555001        subs             r5,#1
  443 000000F8 1AFFFFF9        bne              getk01      ; loop until all ch
                                                            ecked
  444 000000FC EAFFFFF3        b                getk02      ; go back if no mat
                                                            ch found
  445 00000100         ; here, a match was found, so increment the down count u
                       p to the limit
  446 00000100 E2833001 
                       getk00  add              r3,#1
  447 00000104 E1530008        cmp              r3,r8       ; has it reached th
                                                            e debounce count?
  448 00000108 1AFFFFF1        bne              getk03
  449 0000010C         ; here it means that the key was really pressed and debo
                       unced
  450 0000010C         ; so we must get its value and wait for it to be release
                       d
  451 0000010C E2444004        sub              r4,#4       ; point to previous
                                                             entry in table
  452 00000110 E5940000        ldr              r0,[r4]     ; load the result
  453 00000114         ; now, watch for a debounce time for the buttons to be a
                       ll up
  454 00000114         ; so we should see either all buttons up or this button 
                       down
  455 00000114         ; anything else means more than one key is being pressed
                       
  456 00000114         ; so start over
  457 00000114         ; r7 has the button down pattern, r1 has the all buttons
                        up
  458 00000114         ; r3 has the down count, used to distinguish short press
                        from long press
  459 00000114 E59F5060        ldr              r5,=lptime  ; get the long pres
                                                            s time
  460 00000118 E3A04000 
                       getk05  mov              r4,#0       ; to debounce the r
                                                            elease
  461 0000011C E5926000 
                       getk06  ldr              r6,[r2]     ; read the GPIO
  462 00000120 E0066001        and              r6,r6,r1    ; mask all the othe
                                                            r bits?
  463 00000124 E1560007        cmp              r6,r7       ; same as before?
  464 00000128 1A000002        bne              getk04      ; branch if not
  465 0000012C E1530005        cmp              r3,r5       ; have we a long pr
                                                            ess?
  466 00000130 12833001        addne            r3,#1       ; if not, add 1
  467 00000134 EAFFFFF7        b                getk05      ; and keep waiting
  468 00000138 E1560001 
                       getk04  cmp              r6,r1       ; all keys up?
  469 0000013C 1AFFFFE3        bne              getk02      ; another button --
                                                             start over
  470 00000140 E2844001        add              r4,#1       ; otherwise, add 1 
                                                            to the debounce    
                                                                
  471 00000144 E1540008        cmp              r4,r8       ; debounce time ela
                                                            psed?
  472 00000148 1AFFFFF3        bne              getk06      ; if not, wait anot



ARM Macro Assembler    Page 13 


                                                            her while
  473 0000014C         ; finished -- we have the index number in r0.
  474 0000014C         ; if it was a long press, r3 will contain lptime, equal 
                       to r5
  475 0000014C E1530005        cmp              r3,r5       ; are they the same
                                                            , i.e. long press?
  476 00000150 1A000000        bne              getk07
  477 00000154 E2600000        rsb              r0,#0       ; negate it
  478 00000158 E8BD01FE 
                       getk07  ldmfd            sp!,{r1-r8}
  479 0000015C E12FFF1E        bx               lr
  480 00000160         
  481 00000160         
  482 00000160         
  483 00000160 E0028014 
              00000000 
              E002801C 
              E0028010 
              001E8480 
              00009C40 
              00000000 
              000F4240         AREA             Stuff, DATA, READWRITE
  484 00000000         
  485 00000000         
  486 00000000         
  487 00000000         
  488 00000000         
  489 00000000         
  490 00000000 000F4240 
                       lptime  equ              1000000     ; long press time
  491 00000000 00009C40 
                       dbtime  equ              40000       ; minimum time to a
                                                            llow debounce
  492 00000000         
  493 00000000         ; this displays the rightmost 4 bits of r0 in the ARM bo
                       ard's LEDs
  494 00000000         ; assumes the IO1DIR is already correctly set up
  495 00000000         
  496 00000000         
  497 00000000 00000000 
                       revtab  dcd              0x00000000  ; 0
  498 00000004 00080000        dcd              0x00080000  ; 1
  499 00000008 00040000        dcd              0x00040000  ; 2
  500 0000000C 000C0000        dcd              0x000c0000  ; 3
  501 00000010 00020000        dcd              0x00020000  ; 4
  502 00000014 000A0000        dcd              0x000a0000  ; 5
  503 00000018 00060000        dcd              0x00060000  ; 6
  504 0000001C 000E0000        dcd              0x000e0000  ; 7
  505 00000020 00010000        dcd              0x00010000  ; 8
  506 00000024 00090000        dcd              0x00090000  ; 9
  507 00000028 00050000        dcd              0x00050000  ; A
  508 0000002C 000D0000        dcd              0x000d0000  ; B
  509 00000030 00030000        dcd              0x00030000  ; C
  510 00000034 000B0000        dcd              0x000b0000  ; D
  511 00000038 00070000        dcd              0x00070000  ; E
  512 0000003C 000F0000        dcd              0x000f0000  ; F
  513 00000040         
  514 00000040         
  515 00000040         



ARM Macro Assembler    Page 14 


  516 00000040         
  517 00000040         
  518 00000040 00700000 
              00000017 keytab  dcd              0x00F00000-(1<<23),23
  519 00000048 00B00000 
              00000016         dcd              0x00F00000-(1<<22),22
  520 00000050 00D00000 
              00000015         dcd              0x00F00000-(1<<21),21
  521 00000058 00E00000 
              00000014         dcd              0x00F00000-(1<<20),20
  522 00000060         
  523 00000060         
  524 00000060         
  525 00000060 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 thread0 DCD              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, thread0Start 
                                                            ;last element is th
                                                            e pc of the thread
  526 00000098 00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 thread1 DCD              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
, 0, 0, thread1Start
  527 000000D0         
  528 000000D0 00000002 
                       numThreads
                               DCD              2
  529 000000D4         
  530 000000D4 00000000 
                       threadIndex
                               DCD              0
  531 000000D8         
  532 000000D8 00000000 
              00000000 threads DCD              thread0, thread1
  533 000000E0         
  534 000000E0         
  535 000000E0                 END



ARM Macro Assembler    Page 15 


Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\Inc\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 516" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

InitialisationAndMain 00000000

Symbol: InitialisationAndMain
   Definitions
      At line 59 in file App.s
   Uses
      None
Comment: InitialisationAndMain unused
blue 000000C0

Symbol: blue
   Definitions
      At line 154 in file App.s
   Uses
      At line 145 in file App.s
Comment: blue used once
clear_all 000000E0

Symbol: clear_all
   Definitions
      At line 176 in file App.s
   Uses
      At line 255 in file App.s
      At line 293 in file App.s

continue 00000094

Symbol: continue
   Definitions
      At line 134 in file App.s
   Uses
      At line 131 in file App.s
Comment: continue used once
dloop0 0000007C

Symbol: dloop0
   Definitions
      At line 124 in file App.s
   Uses
      At line 126 in file App.s
Comment: dloop0 used once
event_loop 000000F8

Symbol: event_loop
   Definitions
      At line 184 in file App.s
   Uses
      At line 198 in file App.s
      At line 235 in file App.s
      At line 243 in file App.s
      At line 254 in file App.s
      At line 261 in file App.s
      At line 282 in file App.s
      At line 288 in file App.s
      At line 292 in file App.s

green 000000C8

Symbol: green



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 158 in file App.s
   Uses
      At line 147 in file App.s
Comment: green used once
not_getting_number 000001E0

Symbol: not_getting_number
   Definitions
      At line 257 in file App.s
   Uses
      At line 213 in file App.s
Comment: not_getting_number used once
not_initial_state 00000144

Symbol: not_initial_state
   Definitions
      At line 209 in file App.s
   Uses
      At line 191 in file App.s
Comment: not_initial_state used once
red 000000B8

Symbol: red
   Definitions
      At line 150 in file App.s
   Uses
      At line 143 in file App.s
Comment: red used once
skip 000000D0

Symbol: skip
   Definitions
      At line 163 in file App.s
   Uses
      At line 152 in file App.s
      At line 156 in file App.s
      At line 160 in file App.s

sm_gn_00 00000168

Symbol: sm_gn_00
   Definitions
      At line 221 in file App.s
   Uses
      At line 217 in file App.s
Comment: sm_gn_00 used once
sm_gn_01 00000180

Symbol: sm_gn_01
   Definitions
      At line 228 in file App.s
   Uses
      At line 224 in file App.s
Comment: sm_gn_01 used once
sm_gn_02 0000019C

Symbol: sm_gn_02
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 236 in file App.s
   Uses
      At line 231 in file App.s
Comment: sm_gn_02 used once
sm_gn_03 000001B8

Symbol: sm_gn_03
   Definitions
      At line 244 in file App.s
   Uses
      At line 239 in file App.s
Comment: sm_gn_03 used once
sm_gn_04 000001D0

Symbol: sm_gn_04
   Definitions
      At line 251 in file App.s
   Uses
      At line 247 in file App.s
Comment: sm_gn_04 used once
sm_go_00 00000208

Symbol: sm_go_00
   Definitions
      At line 269 in file App.s
   Uses
      At line 264 in file App.s
Comment: sm_go_00 used once
sm_go_01 00000224

Symbol: sm_go_01
   Definitions
      At line 277 in file App.s
   Uses
      At line 272 in file App.s
Comment: sm_go_01 used once
sm_go_02 00000238

Symbol: sm_go_02
   Definitions
      At line 283 in file App.s
   Uses
      At line 280 in file App.s
Comment: sm_go_02 used once
sm_go_03 0000024C

Symbol: sm_go_03
   Definitions
      At line 289 in file App.s
   Uses
      At line 286 in file App.s
Comment: sm_go_03 used once
sm_is_00 00000134

Symbol: sm_is_00
   Definitions
      At line 203 in file App.s
   Uses
      At line 195 in file App.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: sm_is_00 used once
start 00000000

Symbol: start
   Definitions
      At line 63 in file App.s
   Uses
      At line 62 in file App.s
Comment: start used once
stop 0000025C

Symbol: stop
   Definitions
      At line 296 in file App.s
   Uses
      At line 296 in file App.s
Comment: stop used once
thread0Start 00000050

Symbol: thread0Start
   Definitions
      At line 102 in file App.s
   Uses
      At line 525 in file App.s
Comment: thread0Start used once
thread1Start 000000D4

Symbol: thread1Start
   Definitions
      At line 169 in file App.s
   Uses
      At line 526 in file App.s
Comment: thread1Start used once
update_display_and_loop 000000F4

Symbol: update_display_and_loop
   Definitions
      At line 182 in file App.s
   Uses
      At line 202 in file App.s
      At line 207 in file App.s
      At line 220 in file App.s
      At line 227 in file App.s
      At line 250 in file App.s
      At line 268 in file App.s
      At line 276 in file App.s

xloop 00000078

Symbol: xloop
   Definitions
      At line 120 in file App.s
   Uses
      At line 164 in file App.s
Comment: xloop used once
27 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

InterruptStuff 00000000

Symbol: InterruptStuff
   Definitions
      At line 304 in file App.s
   Uses
      None
Comment: InterruptStuff unused
endCycle 00000054

Symbol: endCycle
   Definitions
      At line 335 in file App.s
   Uses
      At line 333 in file App.s
Comment: endCycle used once
irqhan 00000000

Symbol: irqhan
   Definitions
      At line 307 in file App.s
   Uses
      At line 70 in file App.s
Comment: irqhan used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Subroutines 00000000

Symbol: Subroutines
   Definitions
      At line 362 in file App.s
   Uses
      None
Comment: Subroutines unused
blink 00000084

Symbol: blink
   Definitions
      At line 410 in file App.s
   Uses
      At line 186 in file App.s
Comment: blink used once
blink0 000000A0

Symbol: blink0
   Definitions
      At line 418 in file App.s
   Uses
      At line 419 in file App.s
Comment: blink0 used once
display 0000004C

Symbol: display
   Definitions
      At line 391 in file App.s
   Uses
      At line 183 in file App.s
      At line 385 in file App.s

getk00 00000100

Symbol: getk00
   Definitions
      At line 446 in file App.s
   Uses
      At line 441 in file App.s
Comment: getk00 used once
getk01 000000E4

Symbol: getk01
   Definitions
      At line 438 in file App.s
   Uses
      At line 443 in file App.s
Comment: getk01 used once
getk02 000000D0

Symbol: getk02
   Definitions
      At line 433 in file App.s
   Uses
      At line 444 in file App.s
      At line 469 in file App.s

getk03 000000D4



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: getk03
   Definitions
      At line 434 in file App.s
   Uses
      At line 448 in file App.s
Comment: getk03 used once
getk04 00000138

Symbol: getk04
   Definitions
      At line 468 in file App.s
   Uses
      At line 464 in file App.s
Comment: getk04 used once
getk05 00000118

Symbol: getk05
   Definitions
      At line 460 in file App.s
   Uses
      At line 467 in file App.s
Comment: getk05 used once
getk06 0000011C

Symbol: getk06
   Definitions
      At line 461 in file App.s
   Uses
      At line 472 in file App.s
Comment: getk06 used once
getk07 00000158

Symbol: getk07
   Definitions
      At line 478 in file App.s
   Uses
      At line 476 in file App.s
Comment: getk07 used once
getkey 000000C0

Symbol: getkey
   Definitions
      At line 429 in file App.s
   Uses
      At line 185 in file App.s
Comment: getkey used once
perform_pending_op 00000000

Symbol: perform_pending_op
   Definitions
      At line 367 in file App.s
   Uses
      At line 232 in file App.s
      At line 240 in file App.s

ppo_0 00000018

Symbol: ppo_0



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 374 in file App.s
   Uses
      At line 371 in file App.s
Comment: ppo_0 used once
ppo_1 0000002C

Symbol: ppo_1
   Definitions
      At line 379 in file App.s
   Uses
      At line 376 in file App.s
Comment: ppo_1 used once
ppo_x 0000003C

Symbol: ppo_x
   Definitions
      At line 383 in file App.s
   Uses
      At line 373 in file App.s
      At line 378 in file App.s
      At line 381 in file App.s

17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Stuff 00000000

Symbol: Stuff
   Definitions
      At line 483 in file App.s
   Uses
      None
Comment: Stuff unused
keytab 00000040

Symbol: keytab
   Definitions
      At line 518 in file App.s
   Uses
      At line 434 in file App.s
Comment: keytab used once
numThreads 000000D0

Symbol: numThreads
   Definitions
      At line 528 in file App.s
   Uses
      At line 328 in file App.s
Comment: numThreads used once
revtab 00000000

Symbol: revtab
   Definitions
      At line 497 in file App.s
   Uses
      At line 398 in file App.s
Comment: revtab used once
thread0 00000060

Symbol: thread0
   Definitions
      At line 525 in file App.s
   Uses
      At line 532 in file App.s
Comment: thread0 used once
thread1 00000098

Symbol: thread1
   Definitions
      At line 526 in file App.s
   Uses
      At line 532 in file App.s
Comment: thread1 used once
threadIndex 000000D4

Symbol: threadIndex
   Definitions
      At line 530 in file App.s
   Uses
      At line 312 in file App.s
      At line 327 in file App.s

threads 000000D8




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: threads
   Definitions
      At line 532 in file App.s
   Uses
      At line 311 in file App.s
      At line 326 in file App.s

8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO0CLR E002800C

Symbol: IO0CLR
   Definitions
      At line 36 in file App.s
   Uses
      At line 110 in file App.s
Comment: IO0CLR used once
IO0DIR E0028008

Symbol: IO0DIR
   Definitions
      At line 35 in file App.s
   Uses
      At line 105 in file App.s
Comment: IO0DIR used once
IO0PIN E0028000

Symbol: IO0PIN
   Definitions
      At line 33 in file App.s
   Uses
      None
Comment: IO0PIN unused
IO0SET E0028004

Symbol: IO0SET
   Definitions
      At line 34 in file App.s
   Uses
      At line 108 in file App.s
Comment: IO0SET used once
IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 30 in file App.s
   Uses
      At line 401 in file App.s
      At line 422 in file App.s

IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 28 in file App.s
   Uses
      At line 171 in file App.s
Comment: IO1DIR used once
IO1PIN E0028010

Symbol: IO1PIN
   Definitions
      At line 31 in file App.s
   Uses
      At line 412 in file App.s
      At line 431 in file App.s

IO1SET E0028014



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: IO1SET
   Definitions
      At line 29 in file App.s
   Uses
      At line 393 in file App.s
      At line 414 in file App.s

IR 00000000

Symbol: IR
   Definitions
      At line 5 in file App.s
   Uses
      At line 89 in file App.s
      At line 353 in file App.s

IRQslot_en 00000005

Symbol: IRQslot_en
   Definitions
      At line 25 in file App.s
   Uses
      At line 73 in file App.s
Comment: IRQslot_en used once
IntEnable 00000010

Symbol: IntEnable
   Definitions
      At line 18 in file App.s
   Uses
      At line 77 in file App.s
Comment: IntEnable used once
MCR 00000014

Symbol: MCR
   Definitions
      At line 7 in file App.s
   Uses
      At line 95 in file App.s
Comment: MCR used once
MR0 00000018

Symbol: MR0
   Definitions
      At line 8 in file App.s
   Uses
      At line 92 in file App.s
Comment: MR0 used once
T0 E0004000

Symbol: T0
   Definitions
      At line 2 in file App.s
   Uses
      At line 83 in file App.s
      At line 351 in file App.s

T1 E0008000



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


Symbol: T1
   Definitions
      At line 3 in file App.s
   Uses
      None
Comment: T1 unused
TCR 00000004

Symbol: TCR
   Definitions
      At line 6 in file App.s
   Uses
      At line 86 in file App.s
      At line 98 in file App.s

TimeR0ChannelNumber 00000004

Symbol: TimeR0ChannelNumber
   Definitions
      At line 23 in file App.s
   Uses
      At line 24 in file App.s
      At line 73 in file App.s

TimeR0Mask 00000010

Symbol: TimeR0Mask
   Definitions
      At line 24 in file App.s
   Uses
      At line 76 in file App.s
Comment: TimeR0Mask used once
TimerCommandReset 00000002

Symbol: TimerCommandReset
   Definitions
      At line 10 in file App.s
   Uses
      At line 85 in file App.s
Comment: TimerCommandReset used once
TimerCommandRun 00000001

Symbol: TimerCommandRun
   Definitions
      At line 11 in file App.s
   Uses
      At line 97 in file App.s
Comment: TimerCommandRun used once
TimerModeResetAndInterrupt 00000003

Symbol: TimerModeResetAndInterrupt
   Definitions
      At line 12 in file App.s
   Uses
      At line 94 in file App.s
Comment: TimerModeResetAndInterrupt used once
TimerResetAllInterrupts 000000FF




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

Symbol: TimerResetAllInterrupts
   Definitions
      At line 14 in file App.s
   Uses
      At line 88 in file App.s
Comment: TimerResetAllInterrupts used once
TimerResetTimeR0Interrupt 00000001

Symbol: TimerResetTimeR0Interrupt
   Definitions
      At line 13 in file App.s
   Uses
      At line 352 in file App.s
Comment: TimerResetTimeR0Interrupt used once
VIC FFFFF000

Symbol: VIC
   Definitions
      At line 17 in file App.s
   Uses
      At line 68 in file App.s
      At line 355 in file App.s

VectAddR0 00000100

Symbol: VectAddR0
   Definitions
      At line 20 in file App.s
   Uses
      At line 71 in file App.s
Comment: VectAddR0 used once
VectAddr 00000030

Symbol: VectAddr
   Definitions
      At line 19 in file App.s
   Uses
      At line 80 in file App.s
      At line 357 in file App.s

VectCtrl0 00000200

Symbol: VectCtrl0
   Definitions
      At line 21 in file App.s
   Uses
      At line 74 in file App.s
Comment: VectCtrl0 used once
allclear FFFFFFE9

Symbol: allclear
   Definitions
      At line 45 in file App.s
   Uses
      At line 252 in file App.s
      At line 290 in file App.s

btn_add 00000016




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

Symbol: btn_add
   Definitions
      At line 42 in file App.s
   Uses
      At line 237 in file App.s
      At line 284 in file App.s

btn_sub 00000017

Symbol: btn_sub
   Definitions
      At line 43 in file App.s
   Uses
      At line 229 in file App.s
      At line 278 in file App.s

clear FFFFFFEA

Symbol: clear
   Definitions
      At line 44 in file App.s
   Uses
      At line 245 in file App.s
Comment: clear used once
co_add 00000001

Symbol: co_add
   Definitions
      At line 55 in file App.s
   Uses
      At line 241 in file App.s
      At line 287 in file App.s
      At line 374 in file App.s

co_sub 00000002

Symbol: co_sub
   Definitions
      At line 56 in file App.s
   Uses
      At line 233 in file App.s
      At line 281 in file App.s
      At line 379 in file App.s

co_tx 00000000

Symbol: co_tx
   Definitions
      At line 54 in file App.s
   Uses
      At line 180 in file App.s
      At line 369 in file App.s

dbtime 00009C40

Symbol: dbtime
   Definitions
      At line 491 in file App.s
   Uses



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

      At line 432 in file App.s
Comment: dbtime used once
lptime 000F4240

Symbol: lptime
   Definitions
      At line 490 in file App.s
   Uses
      At line 459 in file App.s
Comment: lptime used once
nminus 00000015

Symbol: nminus
   Definitions
      At line 41 in file App.s
   Uses
      At line 196 in file App.s
      At line 222 in file App.s
      At line 270 in file App.s

nplus 00000014

Symbol: nplus
   Definitions
      At line 40 in file App.s
   Uses
      At line 193 in file App.s
      At line 215 in file App.s
      At line 262 in file App.s

sm_getting_number 00000001

Symbol: sm_getting_number
   Definitions
      At line 50 in file App.s
   Uses
      At line 201 in file App.s
      At line 206 in file App.s
      At line 211 in file App.s
      At line 265 in file App.s
      At line 273 in file App.s

sm_getting_operator 00000002

Symbol: sm_getting_operator
   Definitions
      At line 51 in file App.s
   Uses
      At line 234 in file App.s
      At line 242 in file App.s
      At line 259 in file App.s

sm_initial_state 00000000

Symbol: sm_initial_state
   Definitions
      At line 49 in file App.s
   Uses
      At line 177 in file App.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

      At line 189 in file App.s

41 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 60 in file App.s
   Uses
      None
Comment: main unused
1 symbol
436 symbols in table
